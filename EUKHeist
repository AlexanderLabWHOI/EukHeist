configfile: "hierarchy_cluster.yaml"

import io 
import os
import pandas as pd
import numpy as np
import pathlib
from snakemake.exceptions import print_exception, WorkflowError

sys.path.insert(1, 'scripts')
pd.options.display.max_colwidth = 100

import setupworkspace
from setupworkspace import *

localrules: multiqc, copy_bwa_index 
include: "rules/bwa-snake"
include: "rules/eukrep-snake"
include: "rules/megahit-snake"
include: "rules/metabat-snake"
include: "rules/prodigal-snake"
include: "rules/qc-snake"
include: "rules/sourmash-snake"
include: "rules/trim-snake"
    
print(metaG_run_accession)
print("meta'd", flush = True)
print(metaG_run_accession[0], flush = True)
print(identify_read_groups("Group1", "metaG", FORWARD=True), flush = True)

rule all: 
    input:
        # QC DATA
        fastqcZIP_rawG = expand("{base}/qc/fastqc/{study}/{sample}_{num}_fastqc.zip", base = OUTPUTDIR, 
                                study = METAG_FOLDER, sample=metaG_run_accession, num = [1,2]),
        fastqcZIP_rawT = expand("{base}/qc/fastqc/{study}/{sample}_{num}_fastqc.zip", base = OUTPUTDIR, 
                                study = METAT_FOLDER, sample=metaT_run_accession, num = [1,2]),  
        fastqcZIP_trimmedG = expand("{base}/qc/fastqc/{study}/{sample}_{num}.trimmed_fastqc.zip", base = OUTPUTDIR, 
                                    study = METAG_FOLDER, sample=metaG_run_accession, num = [1,2]),  
        fastqcZIP_trimmedT = expand("{base}/qc/fastqc/{study}/{sample}_{num}.trimmed_fastqc.zip", base = OUTPUTDIR, 
                                    study = METAT_FOLDER, sample=metaT_run_accession, num = [1,2]),  
        #MULTIQC
        html_rawG = OUTPUTDIR + "/qc/rawG_multiqc.html",
        stats_rawG = OUTPUTDIR + "/qc/rawG_multiqc_general_stats.txt",
        html_trimmedG = OUTPUTDIR + "/qc/trimmedG_multiqc.html",
        stats_trimmedG = OUTPUTDIR + "/qc/trimmedG_multiqc_general_stats.txt",
        html_rawT = OUTPUTDIR + "/qc/rawT_multiqc.html",
        stats_rawT = OUTPUTDIR + "/qc/rawT_multiqc_general_stats.txt",
        html_trimmedT = OUTPUTDIR + "/qc/trimmedT_multiqc.html",
        stats_trimmedT = OUTPUTDIR + "/qc/trimmedT_multiqc_general_stats.txt",
        #TRIM DATA
        trimmedDataG = expand("{base}/trimmed/{study}/{sample}_{num}.trimmed.fastq.gz", base = SCRATCHDIR, 
                              study = METAG_FOLDER, sample = metaG_run_accession, num = [1,2]), 
        trimmedDataT = expand("{base}/trimmed/{study}/{sample}_{num}.trimmed.fastq.gz", base = SCRATCHDIR, 
                              study = METAT_FOLDER, sample = metaT_run_accession, num = [1,2]), 

        #CALCULATE SOURMASH
        signatureG = expand("{base}/sourmash/{study}/{sample}.10k.sig", base = SCRATCHDIR, 
                            study = METAG_FOLDER, sample = metaG_run_accession),
        signatureT = expand("{base}/sourmash/{study}/{sample}.10k.sig", base = SCRATCHDIR, 
                            study = METAT_FOLDER, sample = metaT_run_accession),

        #ASSEMBLE
        assembly = expand("{base}/megahit/{assembly_group}/final.contigs.fa", base = OUTPUTDIR, 
                          assembly_group = METAG_ASSEMBLYGROUP),  
        assembly_copy = expand("{base}/bwa_index/{assembly_group}.fa", base = SCRATCHDIR, assembly_group = METAG_ASSEMBLYGROUP),  

        #BWA INDEX
        bwa_index = expand("{base}/bwa_index/{assembly_group}.fa.{bwa_tail}", base = SCRATCHDIR, 
                           assembly_group = METAG_ASSEMBLYGROUP, bwa_tail = ["amb", "ann", "bwt", "pac", "sa"]), 

        #BWA MAPPING:
        bwa_memG = get_sample_list(METAG_ASSEMBLYGROUP, METAG_SAMPLELIST, METAG_FOLDER), 
        bwa_memT = get_sample_list(METAT_ASSEMBLYGROUP, METAT_SAMPLELIST, METAT_FOLDER), 

        #BINNING 

        #METABAT2 
        jgi_abund = expand("{base}/metabat2/{assembly_group}/jgi_abund.txt", base = OUTPUTDIR, 
                           assembly_group = METAG_ASSEMBLYGROUP),
        metabat2_bins = expand("{base}/metabat2/{assembly_group}/{assembly_group}_bin", base = OUTPUTDIR, 
                               assembly_group = METAG_ASSEMBLYGROUP),
        #EUKREP
        eukrep =  expand("{base}/eukrep/{assembly_group}/euk.final.contigs.fa", base = OUTPUTDIR, 
                         assembly_group = METAG_ASSEMBLYGROUP), 
        metabat2_bins_euk = expand("{base}/metabat2_euk/{assembly_group}/{assembly_group}_eukbin", 
                                   base = OUTPUTDIR, assembly_group = METAG_ASSEMBLYGROUP),
        
        #PROTEIN PREDICITION
        #PRODIGAL
        proteins = expand("{base}/prodigal/{assembly_group}/proteins.faa", base = OUTPUTDIR, 
                          assembly_group = METAG_ASSEMBLYGROUP), 
